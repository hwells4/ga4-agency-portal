---
description: 
globs: db/schema/**/*.ts,db/db.ts,drizzle.config.ts,actions/db/**/*.ts,app/api/internal/get-creds/route.ts
alwaysApply: false
---
### Backend Rules

Follow these rules when working on the backend.

It uses Postgres (via Supabase), Drizzle ORM, and Next.js Server Actions.

#### General Rules

- **Migrations:** When you modify schema files in `db/schema/`, you **MUST** generate SQL migration files using `npx drizzle-kit generate`. Review the generated SQL before applying it (though typically automatic generation is reliable). Apply migrations using `npx drizzle-kit migrate`. Do *not* manually edit files in `db/migrations`.
- **Multi-Tenancy / Data Isolation:** This is CRITICAL. All database queries (especially in Server Actions) that retrieve or modify data belonging to an agency (e.g., `agencyClients`, `credentials`) **MUST** include a `where` clause filtering by the authenticated user's associated `agencyId`. This prevents data leakage between agencies.

#### Schemas

- **Location:** All Drizzle schemas go in `db/schema`.
- **Naming:** Name schema files descriptively, e.g., `agencies-schema.ts`, `agency-clients-schema.ts`.
- **Importing:** Use `@/db/schema` when importing schema definitions elsewhere.
- **Exporting:** Export all schemas from `db/schema/index.ts`.
- **Schema Object:** Register all table schemas in the `schema` object within `db/db.ts`.
- **Agency User ID:** The `userId` column in the `agencies` table (adapted from `profiles`) should map to the Clerk `userId` of the agency owner. It should be `text("user_id").primaryKey().notNull()`.
- **Timestamps:** Always include `createdAt` (`.defaultNow().notNull()`) and `updatedAt` (`.defaultNow().notNull().$onUpdate(() => new Date())`) columns in all tables.
- **Relationships:** Define foreign key relationships clearly using `.references()`.
- **Cascade Delete:** Use `onDelete: "cascade"` for relationships where child records should be deleted when the parent is deleted (e.g., deleting an `agencyClient` should likely cascade delete its associated `credentials`). Use with caution.
- **Enums:** Use `pgEnum` for columns with a fixed set of string values (e.g., credential status, plan type). Define enums clearly.

**Example Schemas (Illustrative):**

`db/schema/agencies-schema.ts` (Adapted from `profiles`)

```ts
import { pgEnum, pgTable, text, timestamp } from "drizzle-orm/pg-core";

// Potentially adapt/remove membershipEnum if not used initially
export const membershipEnum = pgEnum("membership", ["free", "pro"]);

export const agenciesTable = pgTable("agencies", {
  // Use Clerk's userId as the primary key for the agency owner
  userId: text("user_id").primaryKey().notNull(), 
  agencyName: text("agency_name").notNull(), // Added agency name
  membership: membershipEnum("membership").notNull().default("free"),
  stripeCustomerId: text("stripe_customer_id"),
  stripeSubscriptionId: text("stripe_subscription_id"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date()),
});

export type InsertAgency = typeof agenciesTable.$inferInsert;
export type SelectAgency = typeof agenciesTable.$inferSelect;

```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./todos-schema"
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { todosTable } from "@/db/schema"

const schema = {
  todos: todosTable
}
```

And a more complex schema:

```ts
import { pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"

export const chatsTable = pgTable("chats", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  name: text("name").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertChat = typeof chatsTable.$inferInsert
export type SelectChat = typeof chatsTable.$inferSelect
```

```ts
import { pgEnum, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"
import { chatsTable } from "./chats-schema"

export const roleEnum = pgEnum("role", ["assistant", "user"])

export const messagesTable = pgTable("messages", {
  id: uuid("id").defaultRandom().primaryKey(),
  chatId: uuid("chat_id")
    .references(() => chatsTable.id, { onDelete: "cascade" })
    .notNull(),
  content: text("content").notNull(),
  role: roleEnum("role").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertMessage = typeof messagesTable.$inferInsert
export type SelectMessage = typeof messagesTable.$inferSelect
```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./chats-schema"
export * from "./messages-schema"
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { chatsTable, messagesTable } from "@/db/schema"

const schema = {
  chats: chatsTable,
  messages: messagesTable
}
```

#### Server Actions

- When importing actions, use `@/actions` or `@/actions/db` if db related
- DB related actions should go in the `actions/db` folder
- Other actions should go in the `actions` folder
- Name files like `example-actions.ts`
- All actions should go in the `actions` folder
- Only write the needed actions
- Return an ActionState with the needed data type from actions
- Include Action at the end of function names `Ex: exampleFunction -> exampleFunctionAction`
- Actions should return a Promise<ActionState<T>>
- Sort in CRUD order: Create, Read, Update, Delete
- Make sure to return undefined as the data type if the action is not supposed to return any data
- **Date Handling:** For columns defined as `PgDateString` (or any date string type), always convert JavaScript `Date` objects to ISO strings using `.toISOString()` before performing operations (e.g., comparisons or insertions). This ensures value type consistency and prevents type errors.

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never }
```

Example of an action:

`actions/db/todos-actions.ts`

```ts
"use server"

import { db } from "@/db/db"
import { InsertTodo, SelectTodo, todosTable } from "@/db/schema/todos-schema"
import { ActionState } from "@/types"
import { eq } from "drizzle-orm"

export async function createTodoAction(
  todo: InsertTodo
): Promise<ActionState<SelectTodo>> {
  try {
    const [newTodo] = await db.insert(todosTable).values(todo).returning()
    return {
      isSuccess: true,
      message: "Todo created successfully",
      data: newTodo
    }
  } catch (error) {
    console.error("Error creating todo:", error)
    return { isSuccess: false, message: "Failed to create todo" }
  }
}

export async function getTodosAction(
  userId: string
): Promise<ActionState<SelectTodo[]>> {
  try {
    const todos = await db.query.todos.findMany({
      where: eq(todosTable.userId, userId)
    })
    return {
      isSuccess: true,
      message: "Todos retrieved successfully",
      data: todos
    }
  } catch (error) {
    console.error("Error getting todos:", error)
    return { isSuccess: false, message: "Failed to get todos" }
  }
}

export async function updateTodoAction(
  id: string,
  data: Partial<InsertTodo>
): Promise<ActionState<SelectTodo>> {
  try {
    const [updatedTodo] = await db
      .update(todosTable)
      .set(data)
      .where(eq(todosTable.id, id))
      .returning()

    return {
      isSuccess: true,
      message: "Todo updated successfully",
      data: updatedTodo
    }
  } catch (error) {
    console.error("Error updating todo:", error)
    return { isSuccess: false, message: "Failed to update todo" }
  }
}

export async function deleteTodoAction(id: string): Promise<ActionState<void>> {
  try {
    await db.delete(todosTable).where(eq(todosTable.id, id))
    return {
      isSuccess: true,
      message: "Todo deleted successfully",
      data: undefined
    }
  } catch (error) {
    console.error("Error deleting todo:", error)
    return { isSuccess: false, message: "Failed to delete todo" }
  }
}
```